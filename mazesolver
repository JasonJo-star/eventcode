

//-----------------------------------------------
void testLineFollowSensors()
{
     int LFS0 = digitalRead(lineFollowSensor0);
     int LFS1 = digitalRead(lineFollowSensor1);
     int LFS2 = digitalRead(lineFollowSensor2);
     int LFS3 = digitalRead(lineFollowSensor3);
     int LFS4 = digitalRead(lineFollowSensor4);
     
     // Serial.print ("LFS: L  0 1 2 3 4  R ==> "); 
     // Serial.print (LFS0); 
     // Serial.print (" ");
     // Serial.print (LFS1); 
     // Serial.print (" ");
     // Serial.print (LFS2); 
     // Serial.print (" ");
     // Serial.print (LFS3); 
     // Serial.print (" ");
     // Serial.print (LFS4); 
     // Serial.print ("  ==> ");
    
     // Serial.print (" P: ");
     // Serial.print (P);
     // Serial.print (" I: ");
     // Serial.print (I);
     // Serial.print (" D: ");
     // Serial.print (D);
     // Serial.print (" PID: ");
     // Serial.println (PIDvalue);
}



void motorStop() {
  digitalWrite(ain1, LOW);
  digitalWrite(ain2, LOW);
  digitalWrite(bin1, LOW);
  digitalWrite(bin2, LOW);
  analogWrite(aenlb, 0); // Stop motor A
  analogWrite(benbl, 0); // Stop motor B
}


//--------------------------------------------- 
void motorForward() {
  // Calculate speed for both motors based on power and adj values
  int speedA = 200 - (power + adj);  // Speed calculation for motor A
  int speedB = 200 + power;          // Speed calculation for motor B

  // Check if speedA is negative (reverse direction) and set motor A direction
  if (speedA < 0) {
    speedA = -speedA;               // Convert to positive for PWM
    digitalWrite(ain1, LOW);
  digitalWrite(ain2, HIGH);
    // Set motor A direction to reverse
  } else {
    speedA = speedA;               
    digitalWrite(ain1, HIGH);
  digitalWrite(ain2, LOW);
    // Set motor A direction to forward
  }

  // Check if speedB is negative (reverse direction) and set motor B direction
  if (speedB < 0) {
    speedB = -speedB;               // Convert to positive for PWM
    digitalWrite(bin1, LOW);
  digitalWrite(bin2, HIGH);
    // Set motor B direction to reverse
  } else {
    speedA = speedA;               
    digitalWrite(bin1, HIGH);
  digitalWrite(bin2, LOW);   
    // Set motor B direction to forward
  }

  // Set motor speeds using PWM (analogWrite)
  analogWrite(aenlb, speedA);       // Set speed for motor A
  analogWrite(benbl, speedB);       // Set speed for motor B
}


//---------------------------------------------
void motorBackward() {
  // Calculate speed for both motors based on power and adj values
  int speedA = 200 - (power + adj);  // Speed calculation for motor A
  int speedB = 200 + power;          // Speed calculation for motor B

  // Check if speedA is negative (forward direction when moving backward) and set motor A direction
  if (speedA < 0) {
    speedA = -speedA;               // Convert to positive for PWM
     digitalWrite(ain1, HIGH);
  digitalWrite(ain2, LOW);     // Set motor A direction to forward
  } else {
       digitalWrite(ain1, LOW);
  digitalWrite(ain2, HIGH);  // Set motor A direction to reverse
  }

  // Check if speedB is negative (forward direction when moving backward) and set motor B direction
  if (speedB < 0) {
    speedB = -speedB;               // Convert to positive for PWM
   digitalWrite(bin1, HIGH);
  digitalWrite(bin2, LOW);      // Set motor B direction to forward
  } else {
     digitalWrite(bin1, LOW);
  digitalWrite(bin2, HIGH);      // Set motor B direction to reverse
  }

  // Set motor speeds using PWM (analogWrite)
  analogWrite(aenlb, speedA);       // Set speed for motor A
  analogWrite(benbl, speedB);       // Set speed for motor B
}


//---------------------------------------------
void motorFwTime(unsigned int time) {
  motorForward();
  delay(time);
  motorStop();
}

//---------------------------------------------
void motorBwTime(unsigned int time) {
  motorBackward();
  delay(time);
  motorStop();
}

//------------------------------------------------
void motorTurn(int direction, int degrees) {
  if (direction == LEFT) {
    // Left turn: Motor A backward, Motor B forward
    digitalWrite(ain1, LOW);
    digitalWrite(ain2, HIGH);
    digitalWrite(bin1, HIGH);
    digitalWrite(bin2, LOW);
  } else if (direction == RIGHT) {
    // Right turn: Motor A forward, Motor B backward
    digitalWrite(ain1, HIGH);
    digitalWrite(ain2, LOW);
    digitalWrite(bin1, LOW);
    digitalWrite(bin2, HIGH);
  }

  // Apply PWM to both motors
  analogWrite(aenlb, power);
  analogWrite(benbl, power);
  
  delay(round(adjTurn * degrees));  // Delay based on degrees
  motorStop();  // Stop after completing the turn
}

//---------------------------------------------------
void motorPIDcontrol() {
  int leftMotorSpeed = constrain(iniMotorPower - PIDvalue, 0, 255);  // Adjust motor A speed using PID
  int rightMotorSpeed = constrain(iniMotorPower + PIDvalue, 0, 255); // Adjust motor B speed using PID

  // Set motor directions and speeds
  if (leftMotorSpeed > 0) {
    digitalWrite(ain1, HIGH);
    digitalWrite(ain2, LOW);
  } else {
    digitalWrite(ain1, LOW);
    digitalWrite(ain2, HIGH);
    leftMotorSpeed = -leftMotorSpeed;
  }

  if (rightMotorSpeed > 0) {
    digitalWrite(bin1, HIGH);
    digitalWrite(bin2, LOW);
  } else {
    digitalWrite(bin1, LOW);
    digitalWrite(bin2, HIGH);
    rightMotorSpeed = -rightMotorSpeed;
  }

  analogWrite(aenlb, leftMotorSpeed);  // Apply speed to motor A
  analogWrite(benbl, rightMotorSpeed); // Apply speed to motor B
}

//---------------------------------------------------
void runExtraInch(void) {
  motorPIDcontrol();
  delay(extraInch);
  motorStop();
}

//---------------------------------------------------
void goAndTurn(int direction, int degrees) {
  motorPIDcontrol();
  delay(adjGoAndTurn);
  motorTurn(direction, degrees);
}

void mazeSolve(void)
{
    while (!status)
    {
        readLFSsensors();  
        switch (mode)
        {   
          case NO_LINE:  
            motorStop();
            goAndTurn (LEFT, 180);
            recIntersection('B');
            break;
          
          case CONT_LINE: 
            runExtraInch();
            readLFSsensors();
            if (mode != CONT_LINE) {goAndTurn (LEFT, 90); recIntersection('L');} // or it is a "T" or "Cross"). In both cases, goes to LEFT
            else mazeEnd(); 
            break;
            
         case RIGHT_TURN: 
            runExtraInch();
            readLFSsensors();
            if (mode == NO_LINE) {goAndTurn (RIGHT, 90); recIntersection('R');}
            else recIntersection('S');
            break;   
            
         case LEFT_TURN: 
            goAndTurn (LEFT, 90); 
            recIntersection('L');
            break;   
         
         case FOLLOWING_LINE: 
            followingLine();
            break;      
        
         }
    }
}

//---------------------------------------------
void recIntersection(char direction)
{
  path[pathLength] = direction; // Store the intersection in the path variable.
  pathLength ++;
  simplifyPath(); // Simplify the learned path.
}

//----------------------------------------------
void mazeEnd(void)
{
  motorStop();
  // BT1.print("The End  ==> Path: ");
  // for(int i=0;i<pathLength;i++)
  //   BT1.print(path[i]);
  //   //Serial.print(path[i]);
  // BT1.println("");
  // Serial.print("  pathLenght ==> ");
  // Serial.println(pathLength);
  status = 1;
  mode = STOPPED;
}

//----------------------------------------------
void followingLine(void)
{
   readLFSsensors(); 
   calculatePID();
   motorPIDcontrol();   
}

//------------------------------------------------------------------------------------------
// Path simplification.  The strategy is that whenever we encounter a
// sequence xBx, we can simplify it by cutting out the dead end.  For
// example, LBL -> S, because a single S bypasses the dead end
// represented by LBL.
void simplifyPath()
{
  // only simplify the path if the second-to-last turn was a 'B'
  if(pathLength < 3 || path[pathLength-2] != 'B')
    return;

  int totalAngle = 0;
  int i;
  for(i=1;i<=3;i++)
  {
    switch(path[pathLength-i])
    {
      case 'R':
        totalAngle += 90;
	break;
      case 'L':
	totalAngle += 270;
	break;
      case 'B':
	totalAngle += 180;
	break;
    }
  }

  // Get the angle as a number between 0 and 360 degrees.
  totalAngle = totalAngle % 360;

  // Replace all of those turns with a single one.
  switch(totalAngle)
  {
    case 0:
	path[pathLength - 3] = 'S';
	break;
    case 90:
	path[pathLength - 3] = 'R';
	break;
    case 180:
	path[pathLength - 3] = 'B';
	break;
    case 270:
	path[pathLength - 3] = 'L';
	break;
  }

  // The path is now two steps shorter.
  pathLength -= 2;
  
} 

//----------------------------------------------------------------------------------------------
void mazeOptimization (void)
{
  while (!status)
  {
    readLFSsensors();  
    switch (mode)
    {
      case FOLLOWING_LINE:
        followingLine();
        break;    
      case CONT_LINE:
        if (pathIndex >= pathLength) mazeEnd (); 
        else {mazeTurn (path[pathIndex]); pathIndex++;}
        break;  
      case LEFT_TURN:
        if (pathIndex >= pathLength) mazeEnd (); 
        else {mazeTurn (path[pathIndex]); pathIndex++;}
        break;  
      case RIGHT_TURN:
        if (pathIndex >= pathLength) mazeEnd (); 
        else {mazeTurn (path[pathIndex]); pathIndex++;}
        break;   
    }    
   }  
}

//-----------------------------------------------------
void mazeTurn (char dir) 
{
  switch(dir)
  {
    case 'L': // Turn Left
       goAndTurn (LEFT, 90);      
       break;   
    
    case 'R': // Turn Right
       goAndTurn (RIGHT, 90);     
       break;   
       
    case 'B': // Turn Back
       goAndTurn (RIGHT, 800);     
       break;   
       
    case 'S': // Go Straight
       runExtraInch(); 
       break;
  }
}
void loop() {
  if (!status) {
    mazeSolve();  // Call the maze solving function until the maze is solved
  } else {
    // Check if the button is pressed to trigger maze optimization
    if (digitalRead(buttonPin) == HIGH) {
      mazeOptimization();  // Once the button is pressed, run maze optimization
    } else {
      motorStop();  // Stop the robot if the button is not pressed
    }
  }
}
